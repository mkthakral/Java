package loblaw.image.compare.testing;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Arrays;

import org.junit.jupiter.api.Test;

import loblaw.image.compare.constant.ImageUtilityConstants;
import loblaw.image.compare.helper.ImageProcessor;
import loblaw.image.compare.helper.format.ImageProcessOuput;

/**
 * @author Mohit Kumar Description: This is a JUnit Test case to test Image
 *         Compare Utility
 *
 */
class ImageProcessorTest {

	/**
	 * This test case tests the primary method in Image Compare Utility, takes input
	 * file and images from project, get it procesed, validate generated output
	 * 
	 * @throws Exception
	 */

	private final String INPUT_FILES_ROOT = "./resources/testing/input_files/";

	private final String INPUT_FILE_EMPTY = "1-input-empty-file.csv";
	private final String INPUT_FILE_JUST_HEADER = "2-input-just-header.csv";
	private final String INPUT_FILE_ONE_ENTRY = "3-input-one-row.csv";
	private final String INPUT_FILE_MULTIPLE_ROWS = "4-input-multiple-rows.csv";

	/**
	 * This method will test the image processor in case input CSV is blank or empty
	 * 
	 * @throws Exception
	 */
	@Test
	void processInputEmptyFileTest() throws Exception {
		// Input file to test
		String inputFile = INPUT_FILES_ROOT + INPUT_FILE_EMPTY;
		// Object of Image Processor, which would process the input file
		ImageProcessor imageProcessor = new ImageProcessor();
		// Output generated by Image Processor
		ImageProcessOuput imageProcessOuput = imageProcessor.processInput(inputFile);
		// Check if there are any custom errors, returned from Image Processor
		assertNotEquals(ImageUtilityConstants.STRING_BLANK, imageProcessOuput.getError());
	}

	/**
	 * This method will test the image processor when input CSV has just headers
	 * 
	 * @throws Exception
	 */
	@Test
	void processInputJustHeaderTest() throws Exception {
		// Input file to test
		String inputFile = INPUT_FILES_ROOT + INPUT_FILE_JUST_HEADER;
		// Object of Image Processor, which would process the input file
		ImageProcessor imageProcessor = new ImageProcessor();
		// Output generated by Image Processor
		ImageProcessOuput imageProcessOuput = imageProcessor.processInput(inputFile);
		// Store row counter
		int rowCounter = 1;
		// Store Split row in input/output file in the form of array
		String[] currentRowOutputFileSplit;
		// Store current row in String
		String currentRowOutputFile;
		// Create Bufferered reader for output file
		BufferedReader bufferedReaderOutput = new BufferedReader(new FileReader(imageProcessOuput.getOutputFile()));
		try {
			// Loop output file
			while ((currentRowOutputFile = bufferedReaderOutput.readLine()) != null) {
				if (rowCounter == 1) {
					// Split current row from String to String Array
					currentRowOutputFileSplit = currentRowOutputFile.split(ImageUtilityConstants.COMMA);
					// Validate Table header in output CSV
					assertTrue(
							Arrays.equals(currentRowOutputFileSplit, ImageUtilityConstants.OUTPUT_FILE_TABLE_HEADING));
				} else {
					// Fail this test case in case output file has more than a row
					assertTrue(false);
				}
				rowCounter++;
			}
		} finally {
			bufferedReaderOutput.close();
		}
	}

	/**
	 * This method will test the image processor when input CSV has one row input
	 * after headers
	 * 
	 * @throws Exception
	 */
	@Test
	void processOneRowTest() throws Exception {
		// Input file to test
		String inputFile = INPUT_FILES_ROOT + INPUT_FILE_ONE_ENTRY;
		// Object of Image Processor, which would process the input file
		ImageProcessor imageProcessor = new ImageProcessor();
		// Output generated by Image Processor
		ImageProcessOuput imageProcessOuput = imageProcessor.processInput(inputFile);
		// Check if there are any custom errors, returned from Image Processor
		assertEquals(ImageUtilityConstants.STRING_BLANK, imageProcessOuput.getError());
		// Check if Image Processor returned output file path
		assertNotNull(imageProcessOuput.getOutputFile());
		// Check if returned output file path is not blank
		assertNotEquals(ImageUtilityConstants.STRING_BLANK, imageProcessOuput.getOutputFile());
		// Check if returned output file is a CSV file indeed
		assertTrue(imageProcessOuput.getOutputFile().endsWith(ImageUtilityConstants.EXTENSION_CSV));

		// Create objects to read input and output files
		BufferedReader bufferedReaderInput = new BufferedReader(new FileReader(inputFile));
		BufferedReader bufferedReaderOutput = new BufferedReader(new FileReader(imageProcessOuput.getOutputFile()));
		String currentRowOutputFile, currentRowInputFile;
		// Store Split row in input/output file in the form of array
		String[] currentRowOutputFileSplit, currentRowInputFileSplit;
		// Store row counter
		int rowCounter = 1;

		try {
			// Loop Input file, as Rows in input file should be same as rows in output file
			while ((currentRowInputFile = bufferedReaderInput.readLine()) != null) {

				// Read current line of output file
				currentRowOutputFile = bufferedReaderOutput.readLine();

				// Split current rows of input output in String array
				currentRowInputFileSplit = currentRowInputFile.split(ImageUtilityConstants.COMMA);
				currentRowOutputFileSplit = currentRowOutputFile.split(ImageUtilityConstants.COMMA);

				// Validate Table Headers in output file
				if (rowCounter == 1) {
					assertTrue(
							Arrays.equals(currentRowOutputFileSplit, ImageUtilityConstants.OUTPUT_FILE_TABLE_HEADING));
				} else if (rowCounter == 2) {
					{
						// Validate output current row is not null
						assertNotNull(currentRowOutputFile);
						// Validate output current row is not blank
						assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFile);
						// Validate Image 1 in input and output are same, of current row
						assertEquals(currentRowInputFileSplit[0], currentRowOutputFileSplit[0]);
						// Validate Image 2 in input and output are same, of current row
						assertEquals(currentRowInputFileSplit[1], currentRowOutputFileSplit[1]);
						// Validate percentage difference column is not blank
						assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFileSplit[2]);
						// Validate execution time column is not blank
						assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFileSplit[3]);
						// validate percentage difference between two images
						assertEquals("15.59", currentRowOutputFileSplit[2]);
					}

				}
				// Increase row counter
				rowCounter++;
			}

		} finally {
			// Close Input and Output File Connection
			bufferedReaderInput.close();
			bufferedReaderOutput.close();
			// Delete Output file generated by this test case
			File outputFile = new File(imageProcessOuput.getOutputFile());
			if (outputFile.exists())
				outputFile.delete();
		}
	}

	/**
	 * This method will test the image processor when input CSV has one row input
	 * after headers
	 * 
	 * @throws Exception
	 */
	@Test
	void processMutipleRowTest() throws Exception {
		// Input file to test
		String inputFile = INPUT_FILES_ROOT + INPUT_FILE_MULTIPLE_ROWS;
		// Object of Image Processor, which would process the input file
		ImageProcessor imageProcessor = new ImageProcessor();
		// Output generated by Image Processor
		ImageProcessOuput imageProcessOuput = imageProcessor.processInput(inputFile);
		// Check if there are any custom errors, returned from Image Processor
		assertEquals(ImageUtilityConstants.STRING_BLANK, imageProcessOuput.getError());
		// Check if Image Processor returned output file path
		assertNotNull(imageProcessOuput.getOutputFile());
		// Check if returned output file path is not blank
		assertNotEquals(ImageUtilityConstants.STRING_BLANK, imageProcessOuput.getOutputFile());
		// Check if returned output file is a CSV file indeed
		assertTrue(imageProcessOuput.getOutputFile().endsWith(ImageUtilityConstants.EXTENSION_CSV));

		// Create objects to read input and output files
		BufferedReader bufferedReaderInput = new BufferedReader(new FileReader(inputFile));
		BufferedReader bufferedReaderOutput = new BufferedReader(new FileReader(imageProcessOuput.getOutputFile()));
		String currentRowOutputFile, currentRowInputFile;
		// Store Split row in input/output file in the form of array
		String[] currentRowOutputFileSplit, currentRowInputFileSplit;
		// Store execution time of all records
		double totalExecutionTime = 0;
		// Store row counter
		int rowCounter = 1;

		try {
			// Loop Input file, as Rows in input file should be same as rows in output file
			while ((currentRowInputFile = bufferedReaderInput.readLine()) != null) {

				// Read current line of output file
				currentRowOutputFile = bufferedReaderOutput.readLine();

				// Split current rows of input output in String array
				currentRowInputFileSplit = currentRowInputFile.split(ImageUtilityConstants.COMMA);
				currentRowOutputFileSplit = currentRowOutputFile.split(ImageUtilityConstants.COMMA);

				// Validating table headers of output file
				if (rowCounter == 1) {
					assertTrue(
							Arrays.equals(currentRowOutputFileSplit, ImageUtilityConstants.OUTPUT_FILE_TABLE_HEADING));
				} else {

					// Validate output current row is not null
					assertNotNull(currentRowOutputFile);
					// Validate output current row is not blank
					assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFile);
					// Validate Image 1 in input and output are same, of current row
					assertEquals(currentRowInputFileSplit[0], currentRowOutputFileSplit[0]);
					// Validate Image 2 in input and output are same, of current row
					assertEquals(currentRowInputFileSplit[1], currentRowOutputFileSplit[1]);
					// Validate percentage difference column is not blank
					assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFileSplit[2]);
					// Validate execution time column is not blank
					assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFileSplit[3]);

					// As per input, first 3 rows after header, should result in 0 difference
					// percentage
					if (rowCounter < 5) {
						assertEquals("0", currentRowOutputFileSplit[2]);
					}
					// As per input, row 5 should result in this difference percentage
					else if (rowCounter == 5) {
						assertEquals("15.59", currentRowOutputFileSplit[2]);
					}
					// As per input, rest of the rows should contain error in difference percentage
					else {
						assertTrue(currentRowOutputFileSplit[2].contains(ImageUtilityConstants.ERROR));
					}

					// Accumulate execution time
					totalExecutionTime += Double.valueOf(currentRowOutputFileSplit[3]);
				}
				// Increase row counter
				rowCounter++;
			}

			// Execution time for different systems can be different, so just validate that
			// total execution time is > 0
			assertTrue(totalExecutionTime > 0.0);

		} finally {
			// Close Input and Output File Connection
			bufferedReaderInput.close();
			bufferedReaderOutput.close();
			// Delete Output file generated by this test case
			File outputFile = new File(imageProcessOuput.getOutputFile());
			if (outputFile.exists())
				outputFile.delete();
		}
	}

}
